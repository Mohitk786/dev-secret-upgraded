generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipType {
  SILVER
  GOLD
}


model User {
  id            String   @id @default(uuid())         // Unique ID for each user
  email         String   @unique                     // User email (must be unique)
  name          String?                              // Optional display name
  password     String
  avatarUrl     String?                              // Optional avatar URL
  publicKey     String                               // Public key used for E2E encryption
  vaults        Vault[]  @relation("OwnerVaults")     // Vaults owned by this user
  collaborations Collaborator[]                      // Vaults the user is collaborating on
  invitesSent   Invite[] @relation("Inviter")         // Invites sent by the user
  invitesReceived Invite[] @relation("Invitee")       // Invites received by the user
  createdAt     DateTime @default(now())              // Account creation timestamp
  vaultKeys        VaultKey[]
  AuditLog AuditLog[]
  isPremium Boolean @default(false)
  membershipType String?

  SecretEncryption SecretEncryption[]

  Secret Secret[]

  Payment Payment[]
}

model VaultKey {
  id              String   @id @default(uuid())
  vaultId         String
  userId          String
  encryptedKey    String    // Base64 string of AES key encrypted with user's RSA public key

  vault           Vault    @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([vaultId, userId]) 
}


model Vault {
  id            String   @id @default(uuid())        
  name          String                               
  description String?                          
  icon          String?      
  vaultKeys      VaultKey[]    
  ownerId       String               
  owner         User     @relation("OwnerVaults", fields: [ownerId], references: [id]) 
  secrets       Secret[]                             
  collaborators Collaborator[]                       // Collaborators on the vault
  invites       Invite[]                             // Invites related to this vault
  auditLogs     AuditLog[]   
  isDeleted     Boolean  @default(false)
  deletedAt     DateTime?
  createdAt     DateTime @default(now())             
  updatedAt     DateTime @updatedAt                  
}


model Collaborator {
  id           String   @id @default(uuid())           
  userId       String                                // The user who is a collaborator
  user         User     @relation(fields: [userId], references: [id])
  vaultId      String                                 // The vault being collaborated on
  vault        Vault    @relation(fields: [vaultId], references: [id])
  canEdit      Boolean  @default(false)                
  canDelete    Boolean  @default(false)   
  canAdd       Boolean  @default(false)             
  canView      Boolean  @default(true)
  hasSecretAccess Boolean @default(false)
  status       CollaboratorStatus @default(ACCEPTED)  
  invitedAt    DateTime @default(now())                
  acceptedAt   DateTime?                              
  revokedAt    DateTime?                               
  updatedAt    DateTime @updatedAt                     

  @@unique([userId, vaultId])                          
}


// Junction table to track which user a secret is encrypted for
model SecretEncryption {
  id         String   @id @default(cuid())
  secret     Secret   @relation(fields: [secretId], references: [id])
  secretId   String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())

  @@unique([secretId, userId]) 
}

model Secret {
  id            String            @id @default(cuid())
  vault         Vault             @relation(fields: [vaultId], references: [id])
  vaultId       String
  isDeleted     Boolean           @default(false)
  encryptedSecret           String            
  createdBy     User              @relation(fields: [createdById], references: [id])
  createdById   String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?

  encryptedFor  SecretEncryption[]
}

enum CollaboratorStatus {
  ACCEPTED      // Collaborator is active
  REVOKED       // Access was removed by the owner
}



model Invite {
  id            String   @id @default(uuid())        
  vaultId       String                                // Vault this invite is for
  vault         Vault    @relation(fields: [vaultId], references: [id])

  inviterId     String                                
  inviter       User     @relation("Inviter", fields: [inviterId], references: [id])

  inviteeEmail  String                                // Email of invited person
  inviteeId     String?                               // Optional: linked to a user account if registered
  invitee       User?    @relation("Invitee", fields: [inviteeId], references: [id])
  canEdit       Boolean  @default(false)
  canDelete     Boolean  @default(false)
  canView       Boolean  @default(true)
  canAdd        Boolean  @default(false)
  status        InviteStatus @default(PENDING)         // Current status (pending/accepted/etc.)
  expiresAt     DateTime                              
  respondedAt   DateTime?                             // When the invite was accepted/rejected
  createdAt     DateTime @default(now())             
}

enum InviteStatus {
  PENDING        
  ACCEPTED       
  REJECTED       
  EXPIRED       
}

model AuditLog {
  id          String   @id @default(uuid())           
  vaultId     String       
  secretId    String?
  vault       Vault    @relation(fields: [vaultId], references: [id])
  actorId     String?                                // Who performed the action (nullable if system)
  actor       User?    @relation(fields: [actorId], references: [id])
  action      String                                 // What happened (e.g. "invite_sent", "secret_edited")
  description String                                 // Human-readable or encrypted summary
  createdAt   DateTime @default(now())                // When the action occurred
}

model Payment {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  amount Int
  orderId String
  status String
  currency String
  receipt String
  notes Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}     
  

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum SecretType {
  GENERIC
  PASSWORD
  API_KEY
  ENV_VARIABLE
  SSH_KEY
  DATABASE_CREDENTIAL
  TOKEN
}
